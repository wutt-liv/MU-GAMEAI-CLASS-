import pygame
import math
import base64
import os
from pygame.math import Vector2
from pygame.draw import rect

# 'wb' stands for "write binary,"  'rb' stands for "read binary,"
# embedded picture file
crab1_base64 = """
iVBORw0KGgoAAAANSUhEUgAAAKAAAACgCAYAAACLz2ctAAAAAXNSR0IArs4c6QAABBJJREFUeJzt3TGum0UUBlAHBZpsgA2QjgUgFAr67ICOMgvISihpUHZAQ0URChaQLmwgG0BISQENFb5CV7mj+cZ+55SW/ezn/9Normfu/JcLAAAAAADAvXo0efHT7779+7+PvX316+hvcrbV1/yT8SeCAQEkSgCJEkCiHnefWE0+n714cvW8t6+uX/v978+vXvvjVz8rVg7SvUbVNb9cPr4wMQISJYBECSBRAkhUOVGsCo7Pv/ys9Qe/+ObTq8f+eP2h9TyFyR5VwdG9RtXzKu/evL96rCpMjIBECSBRAkiUABLVXgnp6k5SOd+Oa2kEJEoAiRJAogSQqFERUv3a3V0x2aH6xb9r9arMSZ9lYvU1NwISJYBECSBRAkjU8pWQVGFSTfL/+unrwd+7fHQfy0mfZaK6lqsZAYkSQKIEkCgBJKosQsqm4kGfSKXa6qOBfb1u/0ele327/R8VIyBRAkiUABIlgES1V0K6hUmlO5lVmMxMCo5KdyXEEb3cLAEkSgCJEkCitkzmJ6dtVbona01OgdrREzL5LDsKjh33fDECEiWARAkgUQJI1PKekMrq7V3dFZN7cS8FR8UISJQAEiWARAkgUUdta+qumFSrBdSFyUkFR8UISJQAEiWARAkgUVsmoztWKR7a/Ul2FGI7em+MgEQJIFECSJQAErV8krl669Dkrt2nW32c8ervakevjBGQKAEkSgCJEkCiRj0hk4Kje/LS5Bf/02+mWH2W1Z+5+z1X77HjtDIjIFECSJQAEiWARLUnj6sLjm5fQvd9Ty84Jrr/22TlYnKC2eR9jYBECSBRAkiUABJVThRPKjgq97Ida7XuqtFJhYkRkCgBJEoAiRJAoh7tKDgmxcU994Ss1v2uJsXK6sLECEiUABIlgEQJIFHtnpBJwaFoqHW3Wa3eata9Hu3+j0FhYgQkSgCJEkCiBJCox7/98OfVg90J5EmN6bfYE3IvjelVhirV84yARAkgUQJIlAASVfYGVFtunr14cvW8kxrTu+97emEycVJjelVwVNfcCEiUABIlgEQJIFE32ZheeWhbviZHF2tMh38JIFECSJQAErWlMb0yOXq3WpWhf91OWjExAhIlgEQJIFECSNSWlZDuVq5u/0K30HloqgKh0r3HyKRfyEoIN0EAiRJAogSQqPJ0rO7RrJVJwdFt1KZv8p1W17LbhP765S9uVsj5BJAoASRKAIkarSisPo53sr2L2mT7VGWylatiBCRKAIkSQKIEkKjlE/xJr4eCY49uYbK64KgYAYkSQKIEkCgBJMpKyJ2zEgL/QwCJEkCiBJCo9h3TK9Xks3szu3u+X8ct6h4oYCWEuyKARAkgUQJIVGyVofqF3qrHHid990ZAogSQKAEkSgABAAB4OP4BXywaPV8s+VYAAAAASUVORK5CYII=
"""
train_sheet1_base64 = """

"""
eel1_base64 = """
iVBORw0KGgoAAAANSUhEUgAAAIAAAABACAYAAADS1n9/AAAAAXNSR0IArs4c6QAAAzFJREFUeJztmjFrG0EQhUfBTawmhUGG/IA0igsVqdQYJBCoUKFGkC5lIK1curYKl+5SCtSocGEQ+CAuXCWgQqTJDxDI4CLN2U3gUiRr7NNJd7c7s7d7el9ln9fa3Zl3uzPPJgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAZqBS9gDj1VRiljfl5WHVu3b6yV/QCKJb0Wb+XOr7zfzyEYE6hAVSJz5L0JDrTSyIIwYjCAldfhZFu4uN0ppcQgSaFBI0z+QqIQA/rAcub/Le31y++XzbbG8dCBPmxWgTqJP/j57MXz8a311tFAPJh7W3hSL5ifHGyUQQ4BfJh5QSQuPPLim0fxAkfYNcp0gcRPypN3v7EGmDL8a/w5RpwwQcRDRLH0Z+nC1D4IABXfBDnr4AyVvzcNdGs36POKox0ROC8AMqGlA+iKwIxAUhW/sOjFo0WQeLPXD7+XfRBxAIl3foNj1pPXysxlD35Ck4fxOsroPVtSkREw+M+LU6/lCb5NnlV9AI4cDn5ruOtAEaLgILjPp3f3DidfN23f9ls0/jiZO15mg8y6/cyuYkKkSvAxpHnwz+DmMZh2WzTWMMHyYOXNYDLxR430j6Id1fALiXfBl4JwKfkS/sgm3CmDax1H4iI6O5qX2qKnWW0CNh8EDEB/Pm9IiKiWvcw03gIJT8cPoh4EaiEkEZWoYB1THwQdgHUV2H04/x97t/LKhTwj9EiYHFAvWwDXccnHwQC8BDObsirNhDwt8IQgEdI+CAiAth7g4q+1n148kJcRqQGuLvaX2vrdq3K98UHESsC4xvaFogyi8N1H8RaF7BN4WUxgaqNQea/w8fJKhQ1RzifsNQCTrSBmY+/T9Iryc/zpIfzSUXXCMuKSnx8Xt3PYxOAifp15uF6A7jWUW0MIhsxSNq/SUyMBbA++VfRIMTfgCKEUG0Mos3rsL//58/yxsNIADoTcmGyaS7KsH8jAYTzSaWoN9GFq6AM+2db9Kb779fre6PPffd4kPjcxRogadx967vRPAfBh8TnXDWAeBBNC6OiE51GWjUutX+uLsDp4PpGUrI5BCz1uQQByMPRGkqegn8BU2D7wfBVL/0AAAAASUVORK5CYII=
"""
sky1_base64 = """
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
"""

# decoding functions
def save_image_from_base64(b64_string, filename):
    with open(filename, "wb") as f:
        f.write(base64.b64decode(b64_string))

def extract_all_images():
    save_image_from_base64(crab1_base64, "crab1.png")
    save_image_from_base64(train_sheet1_base64, "train-sheet1.png")
    save_image_from_base64(eel1_base64, "eel1.png")
    save_image_from_base64(sky1_base64, "sky1.png")

# Clear img data after use
def cleanup_images():
    for img in ["crab1.png", "train-sheet1.png", "eel1.png", "sky1.png"]:
        if os.path.exists(img):
            os.remove(img)

# pygame setup
pygame.init()
extract_all_images()
screen_width = 1280
screen_height = 720
screen = pygame.display.set_mode((screen_width, screen_height))
clock = pygame.time.Clock()
pygame.display.set_caption("Sceensaver")
running = True

# convert_alpha() used to convert surfaces to the same pixel format as used by the screen. 
# This ensures that you won't lose performance because of conversions when you're blitting them to the screen. 

#Load spritesheet - image need to be in the same folder
train_sprite_sheet_image = pygame.image.load('train-sheet1.png').convert_alpha()
#load crab image
crab_image = pygame.image.load('crab1.png').convert_alpha()
#load eel sprite sheet
eel_sprite_sheet_image = pygame.image.load('eel1.png').convert_alpha()
#load cloud image
cloud_image = pygame.image.load('sky1.png').convert_alpha()

#train variables
train_position = Vector2(0,screen_height/5)
vel = Vector2(0,0)
acc = Vector2(0,0)
acc.x = 3
acc.y = 0
train_sprite_size = Vector2(160, 160)
BLACK = (0,0,0)
train_expand_scale = 1.5
BG = (158, 158, 158)

#rail road variables
rail_color1 = (49, 47, 75)
rail_position1 = Vector2(0, train_position.y + (train_sprite_size.y * train_expand_scale))
rail_width1 = 1280
rail_height1 = 10
rail_color2 = (34, 32, 52)
rail_position2 = Vector2(0, train_position.y + (train_sprite_size.y * train_expand_scale) + rail_height1)

#beach variables
sand_color1 = (189, 92, 27)
sand_position1 = Vector2(0, rail_position2.y + rail_height1)
sand_width1 = 1280
sand_height1 = 10
sand_color2 = (223, 113, 38)
sand_position2 = Vector2(0, sand_position1.y + sand_height1)
sand_height2 = 20
sand_color3 = (217, 160, 102)
sand_position3 = Vector2(0, sand_position2.y + sand_height2)
sand_height3 = 140
sea_color1 = (255, 255, 255)
sea_position1 = Vector2(0, sand_position3.y + sand_height3)
sea_height1 = 20
sea_color2 = (36, 97, 154)
sea_position2 = Vector2(0, sea_position1.y + sea_height1)
sea_height2 = 150

#crab variables
crab_sprite_size = Vector2(160, 160)
crab_scale = 0.4
crab_frame = 0
crab_time = 0
crab_initial_position_y = sand_position3.y + (sand_height3/4.5)
crab_position = Vector2(0, crab_initial_position_y)
crab_run_time = pygame.time.get_ticks()
crab_amp = (sand_height3)/3
crab_run_frequency = 0.05
crab_run_velocity = 3

#eel variables
eel_sprite_size = Vector2(64, 64)
eel_position = Vector2(screen_width/2, sea_position2.y )
eel_scale = 1
eel_vel = Vector2(0,0)
eel_acc = Vector2(0,0)
eel_acc.x = 2
eel_acc.y = 0.5

#cloud variables
cloud_sprite_size = Vector2(1280, 720)
cloud_position = Vector2(0, -60)
cloud_scale = 1 
cloud_frame = 0

def get_image(sheet, frame, width, height, scale, colour):
    image = pygame.Surface((width, height)).convert_alpha()
    # add image to surface (image, position, image_area)
    image.blit(sheet, (0, 0), ((frame * width), 0, width, height))
    image = pygame.transform.scale(image, (width * scale, height * scale))
    #Make colour tranparent
    image.set_colorkey(colour)
    return image

#create animation list-train
animation_list = []
animation_step = 26
last_update = pygame.time.get_ticks()
animation_cooldown = 75
frame = 0

#create animation list-eel
eel_animation_list = []
flip_eel_animation_list = []
ori_eel_animation_list = []
eel_animation_step = 2
eel_last_update = pygame.time.get_ticks()
eel_animation_cooldown = 250
eel_frame = 0

for x in range(animation_step):
    animation_list.append(get_image(train_sprite_sheet_image,x, train_sprite_size.x, train_sprite_size.y, train_expand_scale, BLACK))

crab_sheet = get_image(crab_image, crab_frame, crab_sprite_size.x, crab_sprite_size.y, crab_scale, BLACK)

for x in range(eel_animation_step):
    eel_animation_list.append(get_image(eel_sprite_sheet_image,x, eel_sprite_size.x, eel_sprite_size.y, eel_scale, BLACK))

cloud_sheet = get_image(cloud_image, cloud_frame, cloud_sprite_size.x, cloud_sprite_size.y, cloud_scale, BLACK)

#for flip eel movement
flip_eel_sprite_sheet_image = pygame.transform.flip(eel_sprite_sheet_image, True, False)
for x in range(eel_animation_step):
    flip_eel_animation_list.append(get_image(flip_eel_sprite_sheet_image,x, eel_sprite_size.x, eel_sprite_size.y, eel_scale, BLACK))
for x in range(eel_animation_step):
    ori_eel_animation_list.append(get_image(eel_sprite_sheet_image,x, eel_sprite_size.x, eel_sprite_size.y, eel_scale, BLACK))

while running:
    # poll for events
    # pygame.QUIT event means the user clicked X to close your window
    # close window when esc is pressed
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                running = False
                
    # fill the screen with a color to wipe away anything from last frame
    screen.fill(BG)

    # RENDER YOUR GAME HERE

    #show cloud image
    screen.blit(cloud_sheet, cloud_position)

    #draw rail
    rect(screen, rail_color1, (rail_position1, (rail_width1, rail_height1)))
    rect(screen, rail_color2, (rail_position2, (rail_width1, rail_height1)))

    #draw beach
    rect(screen, sand_color1, (sand_position1, (sand_width1, sand_height1)))
    rect(screen, sand_color2, (sand_position2, (sand_width1, sand_height2)))
    rect(screen, sand_color3, (sand_position3, (sand_width1, sand_height3)))
    rect(screen, sea_color1, (sea_position1, (sand_width1, sea_height1)))
    rect(screen, sea_color2, (sea_position2, (sand_width1, sea_height2)))

    #update train animation
    current_time = pygame.time.get_ticks()
    if current_time - last_update >= animation_cooldown:
        frame += 1
        last_update = current_time
        if frame >= len(animation_list):
            frame = 0

    #show animation for train
    vel = vel + acc
    train_position = train_position + vel
    acc.x = 0
    screen.blit(animation_list[frame],(train_position))

    #Set boundary respawn for train
    if train_position.x >= screen_width:
        train_position.x = -160

    #crab movement
    # Calculate object's y-coordinate using sine
    crab_position.x += crab_run_velocity
    # make crab run back after hit boundary
    if crab_position.x >= screen_width:
        crab_run_velocity = crab_run_velocity * -1
    elif crab_position.x <= 0 - (crab_sprite_size.x * crab_scale):
        crab_run_velocity = crab_run_velocity * -1

    crab_position.y = crab_initial_position_y + crab_amp * math.sin((crab_position.x * crab_run_frequency)/2)
    screen.blit(crab_sheet, crab_position)

    #eel animation
    eel_current_time = pygame.time.get_ticks()
    if eel_current_time - eel_last_update >= eel_animation_cooldown:
        eel_frame += 1
        eel_last_update = eel_current_time
        if eel_frame >= len(eel_animation_list):
            eel_frame = 0
    
    #eel movement
    eel_vel = eel_vel + eel_acc
    eel_position = eel_position + eel_vel
    eel_acc.x = 0
    eel_acc.y = 0
    screen.blit(eel_animation_list[eel_frame],(eel_position))
    
    #Set boucing boundary for eel
    if eel_position.x >= screen_width - eel_sprite_size.x:
        eel_vel.x = eel_vel.x * -1
        eel_animation_list = flip_eel_animation_list
    elif eel_position.y >= screen_height - eel_sprite_size.y:
        eel_vel.y = eel_vel.y * -1
    elif eel_position.x <= 0:
        eel_vel.x = eel_vel.x * -1
        eel_animation_list = ori_eel_animation_list
    elif eel_position.y <= sea_position2.y:
        eel_vel.y = eel_vel.y * -1
    

    # flip() the display to put your work on screen
    pygame.display.flip()
    pygame.display.update()

    clock.tick(60)  # limits FPS to 60
    

pygame.quit()
cleanup_images()